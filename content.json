[{"title":"","date":"2019-06-10T13:25:11.585Z","path":"2019/06/10/非root用户运行docker/","text":"1、 首先创建docker用户组，如果docker用户组存在可以忽略 1sudo groupadd docker 2、把用户添加进docker组中 1sudo gpasswd -a $&#123;USER&#125; docker 3、重启docker 1sudo service docker restart 4、如果普通用户执行docker命令，如果提示get …… dial unix /var/run/docker.sock权限不够，则修改/var/run/docker.sock权限使用root用户执行如下命令，即可 1sudo chmod a+rw /var/run/docker.sock"},{"title":"","date":"2019-06-10T13:18:25.739Z","path":"2019/06/10/安装docker-compose/","text":"1sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose 1sudo chmod +x /usr/local/bin/docker-compose"},{"title":"","date":"2019-04-18T15:00:49.825Z","path":"2019/04/18/docker安装gitlab/","text":"Docker安装gitlab1、docker-compose.yaml123456789101112131415version: '3.0'services: gitlab: image: gitlab/gitlab-ce restart: always container_name: gitlab ports: - \"10443:443\" - \"10080:80\" - \"10022:22\" volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - ./gitlab/config:/etc/gitlab - ./gitlab/logs:/var/log/gitlab - ./gitlab/data:/var/opt/gitlab 2、修改gitlab.rb文件1）把external_url改成部署机器的域名或者IP地址1vim ./gitlab/config/gitlab.rb 12345# 配置http协议所使用的访问地址,不加端口号默认为80external_url 'http://git.sxp.com'# 配置ssh协议所使用的访问地址和端口gitlab_rails['gitlab_ssh_host'] = 'git.sxp.com'gitlab_rails['gitlab_shell_ssh_port'] = 10023 # 此端口是run时22端口映射的10022端口 2）启用https支持1vim ./gitlab/config/gitlab.rb 1234external_url 'http://git.sxp.com'nginx['redirect_http_to_https'] = truenginx['ssl_certificate'] = \"/etc/gitlab/ssl/sxp.com.pem\"nginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/sxp.com.key\" 3）配置邮件发送功能1vim ./gitlab/config/gitlab.rb 阿里云邮箱12345678910111213gitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = \"smtp.sxp.com\"gitlab_rails['smtp_port'] = 465gitlab_rails['smtp_user_name'] = \"sxp@sxp.com\"gitlab_rails['smtp_password'] = \"12345678\"gitlab_rails['smtp_domain'] = \"smtp.sxp.com\"gitlab_rails['smtp_authentication'] = \"login\"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_tls'] = truegitlab_rails['smtp_openssl_verify_mode'] = 'none'gitlab_rails['gitlab_email_from'] = 'sxp@sxp.com'user['git_user_email'] = \"sxp@sxp.com\" ####"},{"title":"","date":"2019-04-16T07:55:21.451Z","path":"2019/04/16/修改Docker的默认镜像存储位置/","text":"修改Docker的默认镜像存储位置默认情况下Docker的存放位置为：/var/lib/docker可以通过下面命令查看具体位置： 1sudo docker info | grep \"Docker Root Dir\" 数据盘挂在 /data 方案1：使用软链接方式（不建议，可以了解一下）1.首先停掉Docker服务： 1systemctl restart docker 或者 1service docker stop 2.对之前的数据做个文件备份 1tar -zcC /var/lib/docker &gt;/mnt/var_lib_docker-backup-$(date + %s).tar.gz 3.然后迁移整个/var/lib/docker目录到目的路径： 1mv /var/lib/docker /data/docker 4.建立symlink软链接 1ln -s /data/docke /var/lib/docker 5.确认文件夹类型为symlink 类型 1ls -al /var/lib/docker 6.这时候启动Docker时发现存储目录依旧是/var/lib/docker，但是实际上是存储在数据盘的，你可以在数据盘上看到容量变化。 1sudo systemctl start docker 方案2：修改镜像和容器的默认存放路径1.Docker的配置文件可以设置大部分的后台进程参数，在各个操作系统中的存放位置不一致，在 Ubuntu 中的位置是：/etc/default/docker，在 CentOS中的位置是：/etc/sysconfig/docker。如果是 CentOS6 则添加下面这行： 1OPTIONS=--graph=\"/data/docker\"--selinux-enabled -H fd:// 如果是 Ubuntu 则添加下面这行（因为 Ubuntu 默认没开启 selinux）： 1OPTIONS=--graph=\"/data/docker\" -H fd:// 或者 1DOCKER_OPTS=\"-g /data/docker\" 最后重新启动，Docker 的路径就改成 /data/docker 了。 如果是CentOS7 就是用如下：修改docker.service文件，使用–graph参数指定存储位置 1sudo vim /usr/lib/systemd/system/docker.service 文本内容：ExecStart=/usr/bin/dockerd下面添加如下内容： 1ExecStart=/usr/bin/dockerd --graph /data/tools/docker 2.修改完成后reload配置文件 1sudo systemctl daemon-reload 3.重启docker服务 1sudo systemctl restart docker.service 备注：如果docker是1.12或以上的版本，可以修改（或新建）daemon.json文件。修改后会立即生效，不需重启docker服务。 1sudo vim /etc/docker/daemon.json 修改如下： 1&#123;\"registry-mirrors\": [\"http://***.***.com\"],\"graph\":\"/data/tools/docker\"&#125;"},{"title":"","date":"2019-04-15T15:27:47.378Z","path":"2019/04/15/Docker容器日志清理/","text":"Docker容器日志清理清理Docker容器日志（治标）新建日志清理脚本clean_docker_log.sh，内容如下： 123456789#!/bin/shecho \"======== start clean docker containers logs ========\"logs=$(find /var/lib/docker/containers/ -name *-json.log)for log in $logs do echo \"clean logs : $log\" cat /dev/null &gt; $log doneecho \"======== end clean docker containers logs ========\" 12# chmod +x clean_docker_log.sh# ./clean_docker_log.sh 设置Docker容器日志大小（治本）设置一个容器服务的日志大小上限上述方法，日志文件迟早又会涨回来。要从根本上解决问题，需要限制容器服务的日志大小上限。这个通过配置容器docker-compose的max-size选项来实现 1234567nginx: image: nginx:1.12.1 restart: always logging: driver: “json-file” options: max-size: “5g” 重启nginx容器之后，其日志文件的大小就被限制在5GB，再也不用担心了。 全局设置新建/etc/docker/daemon.json，若有就不用新建了。添加log-dirver和log-opts参数，样例如下： 123456# vim /etc/docker/daemon.json&#123; &quot;log-driver&quot;:&quot;json-file&quot;, &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot;&#125;&#125; max-size=500m，意味着一个容器日志大小上限是500M，max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。 123// 重启docker守护进程# systemctl daemon-reload# systemctl restart docker"},{"title":"","date":"2019-04-15T15:09:51.965Z","path":"2019/04/15/docker加速器配置/","text":"docker 加速器常用的加速器服务： Docker 官方的中国镜像加速器：从2017年6月9日起，Docker 官方提供了在中国的加速器，以解决墙的问题。不用注册，直接使用加速器地址：https://registry.docker-cn.com 即可。 中国科技大学的镜像加速器：中科大的加速器不用注册，直接使用地址 https://docker.mirrors.ustc.edu.cn/ 配置加速器即可。进一步的信息可以访问：http://mirrors.ustc.edu.cn/help/dockerhub.html?highlight=docker 阿里云加速器：注册阿里云开发账户(免费的)后，访问这个链接就可以看到加速器地址： https://cr.console.aliyun.com/#/accelerator DaoCloud 加速器：注册 DaoCloud 账户(支持微信登录)，然后访问： https://www.daocloud.io/mirror#accelerator-doc Ubuntu 16.04 或 CentOS 7 配置加速器（或其它使用 Systemd 的系统）Ubuntu 16.04 和 CentOS 7 这类系统都已经开始使用 systemd 进行系统初始化管理了，对于使用 systemd 的系统，应该通过编辑服务配置文件 docker.service 来进行加速器的配置。 在启用服务后 1$ sudo systemctl enable docker 可以直接编辑 /etc/systemd/system/multi-user.target.wants/docker.service 文件来进行配置。 1sudo vi /etc/systemd/system/multi-user.target.wants/docker.service 在文件中找到 ExecStart= 这一行，并且在其行尾添加上所需的配置。假设我们的加速器地址为 https://registry.docker-cn.com，那么可以这样配置： 1ExecStart=/usr/bin/dockerd --registry-mirror=https://registry.docker-cn.com 保存退出后，重新加载配置并启动服务： 12sudo systemctl daemon-reloadsudo systemctl restart docker 确认一下配置是否已经生效： 1sudo ps -ef | grep dockerd 如果配置成功，生效后就会在这里看到自己所配置的加速器。 Ubuntu 14.04 配置加速器（或其它使用 Upstart 的系统）Ubuntu 14.04 是使用 upstart 进行系统初始化的，对于这类系统，可以用通过编辑配置文件的方法来配置加速器。 如果是 Ubuntu 14.04，那么编辑 /etc/default/docker，在里面寻找 DOCKER_OPTS 环境变量设置的这一行，在其后添加 -–registry-mirror=&lt;加速器地址&gt;。如果发现该行已被注释，或者不存在该行，那么新添一行即可。 比如，在使用官方源安装了 docker-engine 后，会建立一个默认的 /etc/default/docker，其中相关 DOCKER_OPTS 的行是这样的： 12# Use DOCKER_OPTS to modify the daemon startup options.#DOCKER_OPTS=&quot;--dns 8.8.8.8 --dns 8.8.4.4&quot; 假设我们的加速器地址为 https://registry.docker-cn.com，我们添加一行配置，将其改为： 123# Use DOCKER_OPTS to modify the daemon startup options.#DOCKER_OPTS=&quot;--dns 8.8.8.8 --dns 8.8.4.4&quot;DOCKER_OPTS=&quot;--registry-mirror=https://registry.docker-cn.com&quot; 保存文件后，重启 Docker 引擎： 123$ sudo service docker restartdocker stop/waitingdocker start/running, process 3620 重启成功后，确认一下配置是否已经生效： 12$ sudo ps -ef | grep dockerdroot 3620 1 0 04:26 ? 00:00:00 /usr/bin/dockerd --registry-mirror=https://registry.docker-cn.com --raw-logs 如果配置成功，生效后这里就会看到自己所配置的加速器的内容。"},{"title":"","date":"2019-04-15T14:57:40.503Z","path":"2019/04/15/安装docker/","text":"Linux 安装 docker手动安装帮助 (阿里云ECS可以通过内网安装，见注释部分内容)CentOS 7 (使用yum进行安装)123456789101112131415161718192021222324252627282930313233343536# step 1: 安装必要的一些系统工具sudo yum updatesudo yum install -y yum-utils device-mapper-persistent-data lvm2# Step 2: 添加软件源信息sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# Step 3: 更新并安装 Docker-CEsudo yum makecache fastsudo yum -y install docker-ce# Step 4: 开启Docker服务sudo service docker start注意：其他注意事项在下面的注释中# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。# vim /etc/yum.repos.d/docker-ce.repo# 将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1## 安装指定版本的Docker-CE:# Step 1: 查找Docker-CE的版本:# yum list docker-ce.x86_64 --showduplicates | sort -r# Loading mirror speeds from cached hostfile# Loaded plugins: branch, fastestmirror, langpacks# docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable# docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable# docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable# Available Packages# Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)# sudo yum -y install docker-ce-[VERSION]# 注意：在某些版本之后，docker-ce安装出现了其他依赖包，如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后，需要先安装 docker-ce-selinux。# yum list docker-ce-selinux- --showduplicates | sort -r# sudo yum -y install docker-ce-selinux-[VERSION]# 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2中的命令# 经典网络：# sudo yum-config-manager --add-repo http://mirrors.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo# VPC网络：# sudo yum-config-manager --add-repo http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo Ubuntu 14.04 16.04 (使用apt-get进行安装)123456789101112131415161718192021222324252627# step 1: 安装必要的一些系统工具sudo apt-get updatesudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common# step 2: 安装GPG证书curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -# Step 3: 写入软件源信息sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"# Step 4: 更新并安装 Docker-CEsudo apt-get -y updatesudo apt-get -y install docker-ce注意：其他注意事项在下面的注释中# 安装指定版本的Docker-CE:# Step 1: 查找Docker-CE的版本:# apt-cache madison docker-ce# docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages# docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages# Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)# sudo apt-get -y install docker-ce=[VERSION]# 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2、Step 3中的命令# 经典网络：# curl -fsSL http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -# sudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"# VPC网络：# curl -fsSL http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -# sudo add-apt-repository \"deb [arch=amd64] http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" 使用官方安装脚本自动安装 （仅适用于公网环境）1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun"}]